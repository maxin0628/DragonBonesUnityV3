// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Com.Viperstudio.Geom;

namespace DragonBones
{
		public class Bone: DBObject
		{

	
	      private static bool sortState(TimelineState a,  TimelineState b);
		
	
		  public string displayController;
		
	
	     public bool _isColorChanged;
	     public int _needUpdate;
		
		public Point _tweenPivot;
		protected Transform _tween;
		protected List<Bone> _boneList;
		protected List<Slot> _slotList;
		protected List<TimelineState> _timelineStateList;


		public Bone ()
		{
			_isColorChanged = false;
			_needUpdate = 2;
			_tween.ScaleX = _tween.ScaleY = 0.f;
			inheritRotation = true;
			inheritScale = false;

		}

		public void dispose()
		{

			_boneList.Clear();
			_slotList.Clear();
			_timelineStateList.Clear();
		}

	
		public	virtual Slot getSlot() ;
		public	virtual  List<Slot> getSlots();
		public	virtual  List<Bone> getBones();
		
		public	virtual void setVisible(bool vislble) ;

		public	virtual void invalidUpdate()
		{
			_needUpdate = 2;
		}
		public	virtual bool contains( DBObject obj)
		{
			if (!obj)
			{
				// throw
			}
			
			if (obj == this)
			{
				return false;
			}
			
			DBObject ancestor = obj;
			
			while (!(ancestor == this || ancestor == null))
			{
				ancestor = ancestor.getParent();
			}
			
			return ancestor == this;
		}

		public	virtual void addChild(DBObject obj)
		{
			if (!obj)
			{
				// throw
			}
			
			Bone bone = obj;
			Slot slot = obj;
			
			if (obj == this || (bone && bone.contains(this)))
			{
				//throw std::invalid_argument("An Bone cannot be added as a child to itself or one of its children (or children's children, etc.)");
			}

			if (obj && obj.getParent())
			{
				obj.getParent().removeChild(obj);
			}
			
			if (bone)
			{
				_boneList.Add(bone);
				bone.setParent(this);
				bone.setArmature(_armature);
			}
			else if (slot)
			{
				_slotList.Add(slot);
				slot.setParent(this);
				slot.setArmature(_armature);
			}
		}

		public	virtual void removeChild(Object obj)
		{
			if (!obj)
			{
				// throw
			}
			
			Bone bone = (obj);
			Slot slot = (obj);
			
			if (bone)
			{

				
				if (_boneList.IndexOf(bone)>=0)
				{
					_boneList.Remove(bone);
					bone.setParent(null);
					bone.setArmature(null);
				}
				else
				{
					// throw
				}
			}
			else if (slot)
			{
				//auto iterator = std::find(_slotList.begin(), _slotList.end(), slot);
				
				if (_slotList.IndexOf(slot)>=0)
				{
					_slotList.Remove(slot);
					slot.setParent(null);
					slot.setArmature(null);
				}
				else
				{
					// throw
				}
			}
		}

		
	
		public 	virtual void update(bool needUpdate)
		{
			_needUpdate --;
			
			if (needUpdate || _needUpdate > 0 || (_parent && _parent._needUpdate > 0))
			{
				_needUpdate = 1;
			}
			else
			{
				return;
			}
			
			blendingTimeline();
			global.ScaleX = (origin.ScaleX + _tween.ScaleX) * offset.ScaleX;
			global.ScaleY = (origin.ScaleY + _tween.ScaleY) * offset.ScaleY;
			
			if (_parent)
			{
				float x = origin.X + offset.X + _tween.X;
				float y = origin.Y + offset.Y + _tween.Y;
			    Matrix parentMatrix = _parent.globalTransformMatrix;
				globalTransformMatrix.Tx = global.X = parentMatrix.A * x + parentMatrix.C * y + parentMatrix.Tx;
				globalTransformMatrix.Ty = global.Y = parentMatrix.D * y + parentMatrix.B * x + parentMatrix.Ty;
				
				if (inheritRotation)
				{
					global.SkewX = origin.SkewX + offset.SkewX + _tween.SkewX + _parent.global.SkewX;
					global.SkewY = origin.SkewY + offset.SkewY + _tween.SkewY + _parent.global.SkewY;
				}
				else
				{
					global.SkewX = origin.SkewX + offset.SkewX + _tween.SkewX;
					global.SkewY = origin.SkewY + offset.SkewY + _tween.SkewY;
				}
				
				if (inheritScale)
				{
					global.ScaleX *= _parent.global.ScaleX;
					global.ScaleY *= _parent.global.ScaleY;
				}
			}
			else
			{
				globalTransformMatrix.Tx = global.X = origin.X + offset.X + _tween.X;
				globalTransformMatrix.Ty = global.Y = origin.Y + offset.Y + _tween.Y;
				global.SkewX = origin.SkewX + offset.SkewX + _tween.SkewX;
				global.SkewY = origin.SkewY + offset.SkewY + _tween.SkewY;
			}
			
			/*
    globalTransformMatrix.a = global.scaleX * cos(global.skewY);
    globalTransformMatrix.b = global.scaleX * sin(global.skewY);
    globalTransformMatrix.c = -global.scaleY * sin(global.skewX);
    globalTransformMatrix.d = global.scaleY * cos(global.skewX);
    */
			globalTransformMatrix.A = offset.ScaleX * Math.Cos(global.SkewY);
			globalTransformMatrix.B = offset.ScaleX * Math.Sin(global.SkewY);
			globalTransformMatrix.C = -offset.ScaleY * Math.Sin(global.SkewX);
			globalTransformMatrix.D = offset.ScaleY * Math.Cos(global.SkewX);
		}

		public virtual void updateColor(
			int aOffset,
			int rOffset,
			int gOffset,
			int bOffset,
			float aMultiplier,
			float rMultiplier,
			float gMultiplier,
			float bMultiplier,
			bool colorChanged
			)
		
		{
			for (int i = 0; i < _slotList.Count; ++i)
			{

				_slotList[i].updateDisplayColor(
					aOffset, rOffset, gOffset, bOffset,
					aMultiplier, rMultiplier, gMultiplier, bMultiplier
					);
			}
			
			_isColorChanged = colorChanged;
		}

		public virtual void hideSlots()
		{
			for (int i = 0; i < _slotList.Count;  ++i)
			{
				_slotList[i].changeDisplay(-1);
			}
		}
		public virtual void arriveAtFrame(TransformFrame frame,  TimelineState timelineState, AnimationState animationState, bool isCross)
		{
			// TODO:
			bool displayControl =
				animationState.displayControl &&
					(displayController.Length<=0 || displayController == animationState.name);
			
			// && timelineState->_weight > 0
			// TODO: 需要修正混合动画干扰关键帧数据的问题，如何正确高效的判断混合动画？

			if (displayControl && timelineState._weight > 0)
			{
				const int displayIndex = frame.displayIndex;
				
				for (int i = 0; i < _slotList.Count; ++i)
				{
					Slot slot = _slotList[i];
					slot.changeDisplay(displayIndex);
					slot.updateDisplayVisible(frame.visible);
					
					if (displayIndex >= 0)
					{
						if (frame.zOrder != slot._tweenZOrder)
						{
							slot._tweenZOrder = frame.zOrder;
							_armature._slotsZOrderChanged = true;
						}
					}
				}


				if (!frame.evt.Length<0 && _armature._eventDispatcher.HasEvent(EventData.EventType.BONE_FRAME_EVENT))
				{
					EventData eventData = EventData.borrowObject(EventData.EventType.BONE_FRAME_EVENT);
					eventData.armature = _armature;
					eventData.bone = this;
					eventData.animationState = animationState;
					eventData.frameLabel = frame.evt;
					eventData.frame = frame;
					_armature._eventDataList.Add(eventData);
				}
				
				if (!frame.sound.Length<=0 && Armature.soundEventDispatcher && Armature.soundEventDispatcher.HasEvent(EventData.EventType.SOUND))
				{
					EventData eventData = EventData.borrowObject(EventData::EventType::SOUND);
					eventData.armature = _armature;
					eventData.bone = this;
					eventData.animationState = animationState;
					eventData.sound = frame.sound;
					Armature.soundEventDispatcher.DispatchEvent(eventData);
				}
				
				if (!frame.action.Length<=0)
				{
					for (int i = 0; i<= _slotList.Count;  ++i)
					{
						if (_slotList[i]._childArmature)
						{
							_slotList[i]._childArmature._animation.gotoAndPlay(frame.action);
						}
					}
				}
			}
		}

		public virtual void addState(TimelineState timelineState)
		{
				
			if (_timelineStateList.IndexOf(timelineState) <0)
			{
				_timelineStateList.Add(timelineState);
				_timelineStateList.Sort( sortState);
			}
		}

		public virtual void removeState(TimelineState timelineState)
		{

			if (_timelineStateList.IndexOf(timelineState) >=0)
			{
				_timelineStateList.Remove(timelineState);
			}
		}

		protected virtual void blendingTimeline()
		{
			int i = _timelineStateList.Count;
			
			if (i == 1)
			{
				TimelineState timelineState = _timelineStateList[0];
				Transform transform = timelineState._transform;
				Point pivot = timelineState._pivot;
				timelineState._weight = timelineState._animationState.getCurrentWeight();
				float weight = timelineState._weight;
				_tween.X = transform.X * weight;
				_tween.Y = transform.Y * weight;
				_tween.SkewX = transform.SkewX * weight;
				_tween.SkewY = transform.SkewY * weight;
				_tween.ScaleX = transform.ScaleX * weight;
				_tween.ScaleY = transform.ScaleY * weight;
				_tweenPivot.X = pivot.X * weight;
				_tweenPivot.Y = pivot.Y * weight;
			}
			else if (i > 1)
			{
				int prevLayer = _timelineStateList[i - 1]._animationState.getLayer();
				int currentLayer = 0;
				float weigthLeft = 1f;
				float layerTotalWeight = 0f;
				float x = 0f;
				float y = 0f;
				float skewX = 0f;
				float skewY = 0f;
				float scaleX = 0f;
				float scaleY = 0f;
				float pivotX = 0f;
				float pivotY = 0f;
				
				while (i--)
				{
					TimelineState timelineState = _timelineStateList[i];
					currentLayer = timelineState._animationState.getLayer();
					
					if (prevLayer != currentLayer)
					{
						if (layerTotalWeight >= weigthLeft)
						{
							timelineState._weight = 0;
							break;
						}
						else
						{
							weigthLeft -= layerTotalWeight;
						}
					}
					
					prevLayer = currentLayer;
					timelineState._weight = timelineState._animationState.getCurrentWeight() * weigthLeft;
					float weight = timelineState._weight;
					
					//timelineState
					if (weight && timelineState._blendEnabled)
					{
						Transform transform = timelineState._transform;
						Point pivot = timelineState._pivot;
						x += transform.X * weight;
						y += transform.Y * weight;
						skewX += transform.SkewX * weight;
						skewY += transform.SkewY * weight;
						scaleX += transform.ScaleX * weight;
						scaleY += transform.ScaleY * weight;
						pivotX += pivot.Y * weight;
						pivotY += pivot.Y * weight;
						layerTotalWeight += weight;
					}
				}
				
				_tween.X = x;
				_tween.Y = y;
				_tween.SkewX = skewX;
				_tween.SkewY = skewY;
				_tween.ScaleX = scaleX;
				_tween.ScaleY = scaleY;
				_tweenPivot.X = pivotX;
				_tweenPivot.Y = pivotY;
			}
		}


	 
		protected	virtual void setArmature(Armature armature)
		{
			DBObject.setArmature(armature);
			
			for (int i = 0; i <= _boneList.Count;  ++i)
			{
				_boneList[i].setArmature(armature);
			}
			
			for (int i = 0; i <= _slotList.Count; ++i)
			{
				_slotList[i].setArmature(armature);
			}




		}
}

